diff --git a/cmds/screenrecord/screenrecord.cpp b/cmds/screenrecord/screenrecord.cpp
index 61f83e3..93e3f4f 100644
--- a/cmds/screenrecord/screenrecord.cpp
+++ b/cmds/screenrecord/screenrecord.cpp
@@ -29,6 +29,7 @@
 #include <gui/ISurfaceComposer.h>
 #include <ui/DisplayInfo.h>
 #include <media/openmax/OMX_IVCommon.h>
+#include <media/openmax/OMX_Video.h>
 #include <media/stagefright/foundation/ABuffer.h>
 #include <media/stagefright/foundation/AMessage.h>
 #include <media/stagefright/MediaCodec.h>
@@ -54,11 +55,12 @@ using namespace android;
 
 static const uint32_t kMinBitRate = 100000;         // 0.1Mbps
 static const uint32_t kMaxBitRate = 200 * 1000000;  // 200Mbps
-static const uint32_t kMaxTimeLimitSec = 180;       // 3 minutes
+static const uint32_t kMaxTimeLimitSec = 1800;      // 30 minutes
 static const uint32_t kFallbackWidth = 1280;        // 720p
 static const uint32_t kFallbackHeight = 720;
 
 // Command-line parameters.
+static bool gRawH264 = false;           // output raw h264 instead of mp4
 static bool gVerbose = false;           // chatty on stdout
 static bool gRotate = false;            // rotate 90 degrees
 static bool gSizeSpecified = false;     // was size explicitly requested?
@@ -152,6 +154,9 @@ static status_t prepareEncoder(float displayFps, sp<MediaCodec>* pCodec,
     format->setInt32("bitrate", gBitRate);
     format->setFloat("frame-rate", displayFps);
     format->setInt32("i-frame-interval", 10);
+    format->setInt32("intra-refresh-mode", OMX_VIDEO_IntraRefreshCyclic);
+    int mbs = (((gVideoWidth + 15) / 16) * ((gVideoHeight + 15) / 16) * 10) / 100;
+    format->setInt32("intra-refresh-CIR-mbs", mbs);
 
     sp<ALooper> looper = new ALooper;
     looper->setName("screenrecord_looper");
@@ -302,7 +307,7 @@ static status_t prepareVirtualDisplay(const DisplayInfo& mainDpyInfo,
  */
 static status_t runEncoder(const sp<MediaCodec>& encoder,
         const sp<MediaMuxer>& muxer, const sp<IBinder>& mainDpy,
-        const sp<IBinder>& virtualDpy, uint8_t orientation) {
+        const sp<IBinder>& virtualDpy, uint8_t orientation, int rawOutFd) {
     static int kTimeout = 250000;   // be responsive on signal
     status_t err;
     ssize_t trackIdx = -1;
@@ -341,9 +346,10 @@ static status_t runEncoder(const sp<MediaCodec>& encoder,
         switch (err) {
         case NO_ERROR:
             // got a buffer
-            if ((flags & MediaCodec::BUFFER_FLAG_CODECCONFIG) != 0) {
+            if ((flags & MediaCodec::BUFFER_FLAG_CODECCONFIG) != 0 && !gRawH264) {
                 // ignore this -- we passed the CSD into MediaMuxer when
-                // we got the format change notification
+                // we got the format change notification unless we're dumping
+                // the raw h264
                 ALOGV("Got codec config buffer (%u bytes); ignoring", size);
                 size = 0;
             }
@@ -387,12 +393,17 @@ static status_t runEncoder(const sp<MediaCodec>& encoder,
                 // want to queue these up and do them on a different thread.
                 { // scope
                     ATRACE_NAME("write sample");
-                    err = muxer->writeSampleData(buffers[bufIndex], trackIdx,
-                            ptsUsec, flags);
-                    if (err != NO_ERROR) {
-                        fprintf(stderr,
-                            "Failed writing data to muxer (err=%d)\n", err);
-                        return err;
+                    if (gRawH264) {
+                        // dump the buffer to a file instead of going to the muxer
+                        write(rawOutFd, buffers[bufIndex]->data(), buffers[bufIndex]->size());
+                    } else {
+                        err = muxer->writeSampleData(buffers[bufIndex], trackIdx,
+                                ptsUsec, flags);
+                        if (err != NO_ERROR) {
+                            fprintf(stderr,
+                                "Failed writing data to muxer (err=%d)\n", err);
+                            return err;
+                        }
                     }
                 }
                 debugNumFrames++;
@@ -416,14 +427,16 @@ static status_t runEncoder(const sp<MediaCodec>& encoder,
             {
                 // Format includes CSD, which we must provide to muxer.
                 ALOGV("Encoder format changed");
-                sp<AMessage> newFormat;
-                encoder->getOutputFormat(&newFormat);
-                trackIdx = muxer->addTrack(newFormat);
-                ALOGV("Starting muxer");
-                err = muxer->start();
-                if (err != NO_ERROR) {
-                    fprintf(stderr, "Unable to start muxer (err=%d)\n", err);
-                    return err;
+                if (!gRawH264) {
+                    sp<AMessage> newFormat;
+                    encoder->getOutputFormat(&newFormat);
+                    trackIdx = muxer->addTrack(newFormat);
+                    ALOGV("Starting muxer");
+                    err = muxer->start();
+                    if (err != NO_ERROR) {
+                        fprintf(stderr, "Unable to start muxer (err=%d)\n", err);
+                        return err;
+                    }
                 }
             }
             break;
@@ -558,16 +571,26 @@ static status_t recordScreen(const char* fileName) {
         return err;
     }
 
-    // Configure muxer.  We have to wait for the CSD blob from the encoder
-    // before we can start it.
-    sp<MediaMuxer> muxer = new MediaMuxer(fileName,
+    int rawOutFd = 0;
+    sp<MediaMuxer> muxer = NULL;
+    if (gRawH264) {
+        if (!strncmp(fileName, "stdout", 6)) {
+            rawOutFd = STDOUT_FILENO;
+        } else {
+            rawOutFd = open(fileName, O_CREAT | O_RDWR, 0644);
+        }
+    } else {
+        // Configure muxer.  We have to wait for the CSD blob from the encoder
+        // before we can start it.
+        muxer = new MediaMuxer(fileName,
             MediaMuxer::OUTPUT_FORMAT_MPEG_4);
-    if (gRotate) {
-        muxer->setOrientationHint(90);  // TODO: does this do anything?
+        if (gRotate) {
+            muxer->setOrientationHint(90);  // TODO: does this do anything?
+        }
     }
 
     // Main encoder loop.
-    err = runEncoder(encoder, muxer, mainDpy, dpy, mainDpyInfo.orientation);
+    err = runEncoder(encoder, muxer, mainDpy, dpy, mainDpyInfo.orientation, rawOutFd);
     if (err != NO_ERROR) {
         fprintf(stderr, "Encoder failed (err=%d)\n", err);
         // fall through to cleanup
@@ -586,7 +609,12 @@ static status_t recordScreen(const char* fileName) {
     encoder->stop();
     // If we don't stop muxer explicitly, i.e. let the destructor run,
     // it may hang (b/11050628).
-    muxer->stop();
+
+    if (gRawH264) {
+        close(rawOutFd);
+    } else {
+        muxer->stop();
+    }
     encoder->release();
 
     return err;
@@ -728,6 +756,8 @@ static void usage() {
         "    in videos captured to illustrate bugs.\n"
         "--time-limit TIME\n"
         "    Set the maximum recording time, in seconds.  Default / maximum is %d.\n"
+        "--raw\n"
+        "    Output raw h264 instead of mp4\n"
         "--verbose\n"
         "    Display interesting information on stdout.\n"
         "--help\n"
@@ -753,6 +783,7 @@ int main(int argc, char* const argv[]) {
         { "show-frame-time",    no_argument,        NULL, 'f' },
         { "bugreport",          no_argument,        NULL, 'u' },
         { "rotate",             no_argument,        NULL, 'r' },
+        { "raw",                no_argument,        NULL, 'w' },
         { NULL,                 0,                  NULL, 0 }
     };
 
@@ -814,6 +845,9 @@ int main(int argc, char* const argv[]) {
             gWantInfoScreen = true;
             gWantFrameTime = true;
             break;
+        case 'w':
+            gRawH264 = true;
+            break;
         case 'r':
             // experimental feature
             gRotate = true;
@@ -836,15 +870,17 @@ int main(int argc, char* const argv[]) {
     // error code without logging anything.  We attempt to create the file
     // now for better diagnostics.
     const char* fileName = argv[optind];
-    int fd = open(fileName, O_CREAT | O_RDWR, 0644);
-    if (fd < 0) {
-        fprintf(stderr, "Unable to open '%s': %s\n", fileName, strerror(errno));
-        return 1;
+    if (strncmp(fileName, "stdout", 6)) {
+        int fd = open(fileName, O_CREAT | O_RDWR, 0644);
+        if (fd < 0) {
+            fprintf(stderr, "Unable to open '%s': %s\n", fileName, strerror(errno));
+            return 1;
+        }
+        close(fd);
     }
-    close(fd);
 
     status_t err = recordScreen(fileName);
-    if (err == NO_ERROR) {
+    if (err == NO_ERROR && !gRawH264) {
         // Try to notify the media scanner.  Not fatal if this fails.
         notifyMediaScanner(fileName);
     }
